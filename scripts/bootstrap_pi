#!/usr/bin/env bash
# Install AmpliPi from scratch on a new pi compute module
# This script is mainly intended for MicroNova employees to bringup Pi's.
# Your AmpliPi device should already have this configuration.

helptext="Usage: bootstrap_pi [OPTION]...
Bootstrap a Raspberry Pi Compute Module for first-time AmpliPi setup.

  --hostname NAME: The hostname to set on the pi, so once this script
                   successfully completes connect via {hostname}.local.
                   Default is amplipi
  --cli-only:      Use the lite version of Raspberry Pi OS which does not have
                   a desktop environment
  --img FILE.img:  Specify a .img file to write to the Pi. This option will not
                   modify the image contents, so ignores the --cli-only option
  --no-instr:      Skip printing manual instructions. Pi must already be in
                   bootloader mode before running this script.
  --debug:         Prints all commands to be run and disables cleanup on exit
  -h, --help: Print this help text.
"

# Examples
# With auto-downloaded base Pi image: ./bootstrap_pi --hostname amplipi100
# With preconfigured image: ./bootstrap_pi --img amplipi_1.4.img --no-instr

# Constants
write_speed_mb=6    # MB/s write speed to the Pi's EMMC over USB

hostname='amplipi'  # Hostname to set on the Pi
debug=false         # Enable/disable debugging
lite=false          # Use non-desktop Pi image...
img_file=''         # ...or use this image file explicitly
instructions=true   # Skip manual instruction step
hostname_only=false # Configure only hostname in root partition
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --hostname)
        if (($# > 1)); then
          hostname=$2; shift
        else
          printf "--hostname requires a second parameter\n\n"
          printf "$helptext"
          exit 1
        fi
      ;;
    --img)
        if (($# > 1)); then
          img_file=$2; shift
          hostname_only=true
        else
          printf "--img requires a second parameter\n\n"
          printf "$helptext"
          exit 1
        fi
      ;;
    --cli-only) lite=true ;;
    --no-instr) instructions=false ;;
    --debug) debug=true ;;
    -h|--help) printf "$helptext"; exit 0 ;;
    *)  printf "Unknown parameter passed: $1\n\n"
        printf "$helptext"
        exit 1
      ;;
  esac
  shift
done

$debug && set -x

current_dir="$(dirname "$(realpath ${BASH_SOURCE[0]})")"
amplipi_config_dir="$(realpath $current_dir/../config)"

# do all of this stuff in a temporary directory so it will be lost/erased on reboot
tmpdir=$(mktemp --directory)
pushd $tmpdir

# cleanup temp files on exit
cleanup () {
  # check if an arg was passed to cleanup, in which case we assume this script was successful (trap handler doesn't pass any args)
  if [[ -z "$1" ]]; then
    success=false
  else
    success=true
  fi
  if ! $success; then
    printf "\nbootstrap_pi failed\n"
    if ! $debug; then
      printf "  Try running again with --debug for more details.\n"
    fi
  fi
  if ! $debug || $success; then
    sudo umount /mnt/pi-boot 2>/dev/null
    sudo umount /mnt/pi-root 2>/dev/null
    if [[ -d $tmpdir ]] ; then
      rm -rf $tmpdir
    fi
  else
    printf "\nExited while in debug mode.\n"
    printf "Not unmounting: \n"
    printf "  %s\n" /mnt/pi-boot /mnt/pi-root
    printf "Not removing:\n"
    printf "  %s\n" $tmpdir
  fi
  exit 0
}

# trap any errors and CTRL-C
trap cleanup INT TERM ERR

boot_cmd=rpiboot
if ! command -v $boot_cmd >/dev/null; then

  echo "Downloading Raspberry Pi boot"
  git clone --depth=1 https://github.com/raspberrypi/usbboot

  echo "Installing Raspberry Pi boot"
  pushd usbboot

  # install dependencies as necessary
  inst=false
  deps="libusb-1.0-0-dev make gcc"
  for dep in $deps; do
    dpkg-query -s $dep 1>/dev/null 2>/dev/null || inst=true
  done
  if $inst; then
    sudo apt update
    sudo apt install $deps
  else
    sudo echo "sudo permission granted"  # request sudo password now to avoid confusion later
  fi

  make
  boot_cmd=./usbboot/rpiboot
  popd # usbboot
fi

# instruct user on manual boot process
if $instructions; then
  echo -e "\nPlug in a usb cable from the service port to your computer. Keep AmpliPi Unplugged / Powered OFF for now."
  read -p "Press any key to continue" -n 1
  echo  # newline
  read -p "Press any key and then plug in the AmpliPi" -n 1
fi
sudo $boot_cmd

# wait for the Raspberry Pi to connect
# it will show up as 0a5c:2764 without usbboot
# it will show up as 0a5c:0001 when mounting as /dev/sdX
connected=false
for i in {1..10}; do
  sleep 0.5
  if lsusb -d 0a5c:0001 >/dev/null; then
    printf "Connected to Raspberry Pi!\n\n"
    connected=true
    break
  fi
done
if ! $connected; then
  echo "Error: Failed to connect to Raspberry Pi"
  cleanup
fi

if [[ -z $img_file ]]; then
  if $lite; then
    release=2020-08-20-raspios-buster-armhf-lite
    url=http://downloads.raspberrypi.org/raspios_lite_armhf/images/raspios_lite_armhf-2020-08-24/$release.zip
  else
    release=2020-08-20-raspios-buster-armhf
    url=http://downloads.raspberrypi.org/raspios_armhf/images/raspios_armhf-2020-08-24/$release.zip
  fi
  zip_file=$HOME/Downloads/$release.zip
  if [[ ! -f $zip_file ]]; then
    echo "Downloading Raspberry Pi OS"
    wget $url -O $zip_file # save for later
  fi
  mkdir $release
  pushd $release
  echo "Extracting Raspberry Pi OS"
  unzip $zip_file
  popd # $release
  img_file=$release/$release.img
else
  # Delay to ensure Pi disk device has been loaded
  sleep 1
fi

# Check for Raspberry Pi device path
disk_base_path=/dev/disk/by-id/usb-RPi-MSD
diskpath=$(ls $disk_base_path* 2>/dev/null | head -n1)
if [ ! -z $diskpath ]; then
  echo "Raspberry Pi device found at $diskpath"
else
  echo "ERROR: No Raspberry Pi device found at $disk_base_path*"
fi

img_size_mb=$(du -m $img_file | cut -f1)
# bc truncates, add 0.5 to round
est_time=$(echo "$img_size_mb/$write_speed_mb/60+0.5" | bc -l | cut -d'.' -f1)
echo "Copying the image to the AmpliPi. This takes about $est_time minutes."
echo "Go get a coffee or something :)"
echo "Started at: $(date)"
sudo dd if=$img_file of=$diskpath bs=4MiB status=progress
echo "Finished at: $(date)"

# First arg is partition path to mount
config_boot () {
  sudo mkdir -p /mnt/pi-boot
  sudo mount $1 /mnt/pi-boot # boot partition
  pushd /mnt/pi-boot

  echo "Enabling SSH access"
  sudo touch ssh

  # extra config to make sure the USB serial tty is disabled
  # (we use this to communicate with the AmpliPi preamp)
  echo "Disabling USB serial tty"
  CMDLINE=cmdline.txt
  sudo sed -i $CMDLINE -e "s/console=ttyAMA0,[0-9]\+ //"
  sudo sed -i $CMDLINE -e "s/console=serial0,[0-9]\+ //"

  echo "Copying the pi's boot configuration"
  sudo cp $amplipi_config_dir/boot_config.txt config.txt

  # Added to cmdline.txt between 'quiet' and 'splash' to resize on next boot
  #init=/usr/lib/raspi-config/init_resize.sh

  popd # /mnt/pi-boot
}

# First arg is partition path to mount
config_root () {
  sudo mkdir -p /mnt/pi-root
  sudo mount $1 /mnt/pi-root # root filesystem partition
  pushd /mnt/pi-root

  printf "Setting the hostname to "
  echo $hostname | sudo tee etc/hostname
  # need to change hostname reference too
  # (if you don't it causes a message to be reported after every sudo)
  sudo sed -i'' -e "s/raspberrypi/$hostname/" etc/hosts

  if ! $hostname_only; then
    # add pi user manually to dialout group, avoiding an additional restart
    echo "Adding the pi user to the dialout group"
    sudo sed -i'' -r -e 's/dialout:x:([0-9]+:.*)/dialout:x:\1,pi/' -e 's/:,pi/:pi/' -e 's/pi,pi/pi/' etc/group

    # extra config to enable i2c (from do-i2c in raspi-config bash script)
    BLACKLIST=etc/modprobe.d/raspi-blacklist.conf
    if ! [ -e $BLACKLIST ]; then
      sudo touch $BLACKLIST
    fi
    sudo sed $BLACKLIST -i -e "s/^\(blacklist[[:space:]]*i2c[-_]bcm2708\)/#\1/"
    sudo sed etc/modules -i -e "s/^#[[:space:]]*\(i2c[-_]dev\)/\1/"
    if ! grep -q "^i2c[-_]dev" etc/modules; then
      printf "i2c-dev\n" | sudo tee -a etc/modules
    fi

    # Set UTC as timezone
    # Via bash: sudo rm /etc/localtime; echo UTC | sudo tee /etc/timezone >/dev/null | sudo dpkg-reconfigure -f noninteractive tzdata
    sudo ln -sf usr/share/zoneinfo/Etc/UTC etc/localtime
    echo UTC | sudo tee etc/timezone >/dev/null
  fi

  popd # /mnt/pi-root
}

# it can take a second or two for the new partitions to show up
printf "\nChecking for the new root and boot partitions\n"
boot_part=false
root_part=false
for i in {1..10}; do
  sleep 0.5
  if ! $boot_part && [ -e $diskpath-part1 ]; then
    boot_part=true
    if ! $hostname_only; then
      echo "Editing boot configuration"
      config_boot $diskpath-part1
    fi
  fi
  if ! $root_part && [ -e $diskpath-part2 ]; then
    root_part=true
    echo "Editing root configuration"
    config_root $diskpath-part2
  fi
  $boot_part && $root_part && break
done
if ! $boot_part || ! $root_part ; then
  echo "Error: Failed to find boot and root partitions"
  cleanup
fi

popd # /tmp/*

echo "
Bootstrapping successful. Please complete the following steps:
  1. Disconnect the service USB cable.
  2. Unplug the AmpliPi unit.
  3. Plug it back in to power it on.
  4. Run the deploy script to install the latest AmpliPi version.
"
cleanup "success"
