#!/usr/bin/env bash
# Install AmpliPi software on a remote system

set -e

# get directory that the script exists in
cd "$( dirname "$0" )"

HELP="Install/Update AmpliPi software on a remote system defined by USER@HOST (default: pi@amplipi.local)
  usage: deploy [USER@HOST]

  --fw:      program the latest preamp firmware
  --pw:      generate and set a new random password
  --no-deps: skip installing os-deps and python-deps on AmpliPi"

user_host='pi@amplipi.local'
user_host_set=false
fw=false
pw=false
deps=true
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --fw) fw=true ;;
    --pw) pw=true ;;
    --no-deps) deps=false ;;
    -h|--help) echo -e "$HELP"; exit 0 ;;
    *) if ! $user_host_set; then
          user_host=$1
          user_host_set=true
      else
          echo "Unknown parameter passed: $1";
          echo -e "$HELP";
          exit 1
      fi
      ;;
  esac
  shift
done

printf "Deploying amplipi project to $user_host.\n"
printf "Preamp firmware will %sbe programmed.\n" "$($fw || printf "NOT ")"
printf "A new password will %sbe generated.\n" "$($pw || printf "NOT ")"
printf "os-deps and python-deps will %sbe installed on $user_host.\n" "$($deps || printf "NOT ")"
read -p "Press any key to continue (Ctrl-C to quit)" -n 1
printf "\n"
# TODO: deploy amplipi as a python installed package with pip or something similar
# NOTE: this probably doesnt make sense until we use a more advanced version of poetry or figure out how to not spam the global directory with our scripts and other files?
# check if amplipi is found
host=$(echo $user_host | sed 's/.*@//')
echo "Checking if $host is found"
ping_loc=$(which ping)
found=false
if [[ "$ping_loc" == /c/Windows/system32/ping ]] && ping -n 2 $host; then
  found=true
elif ping -c 2 $host; then
  found=true
fi
if ! $found; then
  echo ""
  echo "Error: Unable to find $host"
  echo "  On older versions of windows (< 10) you may need to install an MDNS server like Bonjour: https://support.apple.com/kb/DL999?locale=en_US"
  echo "  Some users on windows 10 have reported MDNS does not work over Wifi. Try using a wired connection."
  exit 1;
fi

# install dependencies as necessary
echo -e "\nChecking dependencies"
inst=false
python='python'
if which dpkg; then
  # since dpkg exists lets use it to install deps as system packages
  # to note: should any of these be installed and then removed again, dpkg-query will
  # still exit with a 0 status due to the package being in the "residual-config" state.
  # regardless, this ought to cover >90% of cases.
  for dep in python3-venv python3-pip; do
    dpkg-query -s $dep 1>/dev/null 2>/dev/null || inst=true
  done
  if $inst; then
    sudo apt update
    sudo apt install python3-venv python3-pip
  fi
  python='python3' # older version of ubuntu still use python3 to differentiate from python version 2
else
  echo ""
  if ! which python; then
    echo "python needs to be installed to use this script"
    exit 1;
  fi
  if ! which pip; then
    echo "pip needs to be installed to use this script"
    exit 1;
  fi
  if ! $python -m pip install virtualenv; then
    echo "Failed to install python virtual environments, you may need to install this manually"
    exit 1;
  fi
fi

# check for `npm`
if ! which npm; then
  echo "npm & nodejs needs to be installed to use this script"
  exit 1;
fi
if [ $(node --version | tr -d v | cut -f1 -d.) -lt 18 ]; then
  echo "nodejs needs to be version 18 or above to use this script"
  exit 1;
fi
if [ $(npm --version | cut -f1 -d.) -lt 9 ]; then
  echo "npm needs to be version 9 or above to use this script"
  exit 1;
fi

# check for git lfs
if ! which git-lfs; then
  echo "git-lfs needs to be installed to use this script"
fi

# create a virtual environment and install pip dependencies
if [[ ! -d ../venv ]] || [[ ! -e ../venv/bin/activate ]] && [[ ! -e ../venv/Scripts/activate ]]; then
  echo  ""
  echo "Setting up virtual environment"
  mkdir -p ../venv
  $python -m venv ../venv
fi
if [[ -e ../venv/Scripts/activate ]]; then
  source ../venv/Scripts/activate
else
  source ../venv/bin/activate
fi
$python -m pip install --upgrade pip
$python -m pip install poetry
echo -e "Finished checking dependencies\n"

# use a new version for the build but hide it from git since it isn't a real release
old_version=$(poetry version -s)
base_version=${old_version%+*} # trim +XXXXX to avoid generating a bad version below
# parse the git info into: VERSION+GIT_HASH-BRANCH_NAME[-dirty]
# 'git describe' searches the git commit tree for the latest version tag.
# The only guaranteed output is the 7-character short commit hash of the current commit,
# but typically git describe outputs VERSION-N-gHASH[-dirty].
# --always means even if no tag was found still generate an output: HASH[-dirty]
# --dirty appends -dirty if there are changes to tracked files or stashed changes
# --long forces -N-gHASH to be printed even if tagged commit is checked out
# --match '*.*.*' matches tags with *.*.* format (rules out fw/*)
# || true effectively ignores the exit condition of git describe
git_description=$(git describe --always --dirty --long --match '*.*.*' 2>/dev/null) || true
if [[ -z $git_description ]]; then
  # not a git repo, use poetry version and indicate unkown development state
  git_info="$base_version+unknown"
else
  # the hash is by default 7 hex chars, but could be more if required to avoid collisions
  git_hash=$(echo "$git_description" | sed -E 's/.*([0-9a-f]{7,}).*/\1/')
  git_branch=$(git symbolic-ref --short HEAD 2>/dev/null) && git_branch="-$git_branch"
  git_dirty=$(echo "$git_description" | sed -n 's/.*-dirty/-dirty/p')
  git_info="$base_version+$git_hash$git_branch$git_dirty"
fi
poetry version ${git_info}

echo "Building web app"
pushd ../web            # Change to web directory
npm install             # Install nodejs dependencies
npm run build           # Build the web app
popd

# pull in the latest binaries
git lfs checkout

# build release file (put in dist/)
poetry build

# revert to the old version so we don't modify extra files (the modified version info is in the build already)
poetry version $old_version

# exit virtual environment
deactivate

# setup ssh access if necessary
if ! ssh -o PasswordAuthentication=no $user_host 'echo "AmpliPi has your SSH Key"'; then
  # By default ssh only searches the default keys, lets make sure one of them exist
  if [[ ! -f ~/.ssh/id_ed25519 ]] && [[ ! -f ~/.ssh/id_ecdsa ]] && [[ ! -f ~/.ssh/id_rsa ]]; then
    echo ""
    echo "Generating new ssh key for amplipi"
    ssh-keygen -P '' -N '' -t ed25519 -f ~/.ssh/id_ed25519
  fi
  echo ""
  echo "Trying to copy your SSH id to AmpliPi, you will need to enter your AmpliPi's password below"
  ssh-copy-id $user_host
fi

# copy stuff to board
latest_release=$(ls -d -t ../dist/amplipi-*.tar.gz | head --lines=1)
release_name=$(echo $latest_release | sed -e 's@../dist/@@' -e 's/.tar.gz//')
echo "Copying $latest_release to $user_host"
scp $latest_release $user_host:
echo "Making development folder on pi"
ssh $user_host "mkdir -p amplipi-dev"
echo "Extracting folder into $user_host:~/amplipi-dev"
ssh $user_host "cd amplipi-dev && tar -xvf ../${release_name}.tar.gz && cp -af ${release_name}/* . && rm -r ${release_name}"
echo "Configuring installation"
ssh $user_host "chmod +x amplipi-dev/scripts/configure.py"
opts=""
$fw && opts="$opts --firmware"
$pw && opts="$opts --password"
$deps && opts="$opts --os-deps --python-deps"
ssh $user_host -t "python3 amplipi-dev/scripts/configure.py --web --restart-updater --display --audiodetector$opts" || echo ""

printf "Waiting for AmpliPi to restart"
restart_finished=false
for i in {1..30}; do
  sleep 2
  printf "."
  if [[ "$ping_loc" == /c/Windows/system32/ping ]] && ping -n 2 $host; then
    restart_finished=true
    break
  elif ping -c 2 $host 1>/dev/null 2>/dev/null; then
    restart_finished=true
    break
  fi
done
echo
if $restart_finished; then
  printf "Restart successful, waiting for amplipi service."
  amplipi_found=false
  for i in {1..30}; do
    sleep 2
    printf "."
    if curl -sX GET "${host}/api" -H "Accept: application/json" >/dev/null; then
      amplipi_found=true
      printf "\nUpdate finished.\n"
      break
    fi
  done
  if ! $amplipi_found; then
    printf "\nFailed to detect ${host}/api.\n"
  fi
  echo "Deleting tarball at ${release_name}.tar.gz"
  ssh $user_host "rm ${release_name}.tar.gz"
else
  echo "Restart failed."
fi
