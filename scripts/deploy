#!/usr/bin/env bash
# Install AmpliPi software on a remote system

set -e

# get directory that the script exists in
cd "$( dirname "$0" )"

HELP="Install/Update AmpliPi software on a remote system defined by USER@HOST (default: pi@amplipi.local)\n
  usage: deploy [USER@HOST] [--mock-ctrl]\n
\n
  --dev: add info to version showing the current git hash and branch\n
"

user_host='pi@amplipi.local'
user_host_set=false
dev=false
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --dev) dev=true ;;
    -h|--help) echo -e $HELP; exit 0 ;;
    *) if ! $user_host_set; then
          user_host=$1
          user_host_set=true
      else
          echo "Unknown parameter passed: $1";
          echo -e $HELP;
          exit 1
      fi
      ;;
  esac
  shift
done

read -p "Deploying amplipi project (development build) to $user_host, press any key to continue (Ctrl-C to quit)" -n 1
echo "" # newline
# TODO: deploy amplipi as a python installed package with pip or something similar
# NOTE: this probably doesnt make sense until we use a more advanced version of poetry or figure out how to not spam the global directory with our scripts and other files?
# check if amplipi is found
host=$(echo $user_host | sed 's/.*@//')
echo "Checking if $host is found"
ping_loc=$(which ping)
found=false
if [[ "$ping_loc" == /c/Windows/system32/ping ]] && ping -n 2 $host; then
  found=true
elif ping -c 2 $host; then
  found=true
fi
if ! $found; then
  echo ""
  echo "Error: Unable to find $host"
  echo "  On older versions of windows (< 10) you may need to install an MDNS server like Bonjour: https://support.apple.com/kb/DL999?locale=en_US"
  echo "  Some users on windows 10 have reported MDNS does not work over Wifi. Try using a wired connection."
  exit 1;
fi
# install dependencies as necessary
inst=false
python='python'
if which dpkg; then
  # since dpkg exists lets use it to install python dependencies as system dependencies
  for dep in python3-venv python3-pip; do
    dpkg-query -s $dep 1>/dev/null 2>/dev/null || inst=true
  done
  if $inst; then
    sudo apt update
    sudo apt install python3-venv python3-pip
  fi
  python='python3' # older version of ubuntu still use python3 to differentiate from python version 2
else
  echo ""
  if ! which python; then
    echo "python needs to be installed to use this script"
    exit 1;
  fi
  if ! which pip; then
    echo "pip needs to be installed to use this script"
    exit 1;
  fi
  if ! $python -m pip install virtualenv; then
    echo "Failed to install python virtual environments, you may need to install this manually"
    exit 1;
  fi
fi
# create a virtual environment and install pip dependencies
if [[ ! -d ../venv ]] || [[ ! -e ../venv/bin/activate ]] && [[ ! -e ../venv/Scripts/activate
]]; then
  echo  ""
  echo "Setting up virtual environment"
  mkdir -p ../venv
  $python -m venv ../venv
fi
if [[ -e ../venv/Scripts/activate ]]; then
  source ../venv/Scripts/activate
else
  source ../venv/bin/activate
fi
$python -m pip install --upgrade pip
$python -m pip install poetry

if ! $mock_ctrl; then
  # set ENABLE_HW flag since this is being deployed to a machine with the actual hardware setup
  sed -i 's/DISABLE_HW = True/DISABLE_HW = False/' ../amplipi/rt.py
fi

if $dev; then
  old_version=$(poetry version -s)
  developer_version="$(git describe --always --dirty)-$(git rev-parse --abbrev-ref HEAD)"
  # TODO: write extra git info to the pyproject.toml file since poetry complains about non-standard versions
  #poetry version $developer_version
fi
# package release
poetry build

if $dev; then
  #poetry version $old_version
  echo
fi

# exit virtual environment
deactivate

# setup ssh access if necessary
if ! ssh -o PasswordAuthentication=no $user_host 'echo "AmpliPi has your SSH Key"'; then
  # By default ssh only searches the default keys, lets make sure one of them exist
  if [[ ! -f ~/.ssh/id_ed25519 ]] && [[ ! -f ~/.ssh/id_ecdsa ]] && [[ ! -f ~/.ssh/id_rsa ]]; then
    echo ""
    echo "Generating new ssh key for amplipi"
    ssh-keygen -P '' -N '' -t ed25519 -f ~/.ssh/id_ed25519
  fi
  echo ""
  echo "Trying to copy your SSH id to AmpliPi, you will need to enter your AmpliPi's password below"
  ssh-copy-id $user_host
fi

# copy stuff to board
latest_release=$(ls -d -t ../dist/amplipi-*.tar.gz | head --lines=1)
release_name=$(echo $latest_release | sed -e 's@../dist/@@' -e 's/.tar.gz//')
echo "Copying $latest_release to $user_host"
scp $latest_release $user_host:
echo "Making development folder on pi"
ssh $user_host "mkdir -p amplipi-dev"
echo "Extracting folder into $user_host:~/amplipi-dev"
ssh $user_host "cd amplipi-dev && tar -xvf ../${release_name}.tar.gz && cp -af ${release_name}/* . && rm -r ${release_name}"
echo "Configuring installation"
ssh $user_host "chmod +x amplipi-dev/scripts/configure.py"
ssh $user_host -t "python3 amplipi-dev/scripts/configure.py --os-deps --python-deps --web --restart-updater --display"
