#!/bin/sh
# create a partition scheme on first bootup that looks like this:
# - boot partition, original size
# - system partition #1, 10G
# - system partition #2, 10G
# - state & /home partition, 10G
# this scheme permits us to install new operating systems over the air and in the future
# simplify upgrades. during time of implementation, we have not roadmapped this OTA functionality yet.
# ref: https://github.com/micro-nova/AmpliPi/issues/489
#
# A lot of this script was inspired by (or copied from) Raspberry Pi's init_resize.sh; cheers yall.
# ref: https://github.com/RPi-Distro/raspi-config/blob/408bde537671de6df2d9b91564e67132f98ffa71/usr/lib/raspi-config/init_resize.sh
# ref: https://github.com/RPi-Distro/raspi-config/blob/408bde537671de6df2d9b91564e67132f98ffa71/LICENSE

echo "${0}: starting first boot partitioning tasks..."

# bail if any command uses an unset variable
set -u

# spit out the execution of each line; in case we do bail we know where it failed
set -x

# kernel panic messages will quickly overwhelm the screen if we don't trap the exit during
# potential troubleshooting. it feels most sane to "try again" with a reboot; our other option
# is to halt.
trap 'sleep 5; mount -o remount,ro / ; umount /boot ; sleep 5; echo b > /proc/sysrq-trigger; sleep 5' EXIT

# set up stuff a regular init might help with
mount -t proc proc /proc
mount -t sysfs sys /sys
mount -t tmpfs tmp /run
mkdir -p /run/systemd
mount /boot
mount -o remount,rw /

ROOT_PART_DEV=$(findmnt / -o source -n)
ROOT_PART_NAME=$(echo "${ROOT_PART_DEV}" | cut -d "/" -f 3)
ROOT_DEV_NAME=$(echo /sys/block/*/"${ROOT_PART_NAME}" | cut -d "/" -f 4)
ROOT_DEV="/dev/${ROOT_DEV_NAME}"

# sanity checks. Should any of these conditions be true, users must manage their own
# partitioning or reflash.
partprobe
blkid ${ROOT_DEV}p3
if [ $? -eq 0 ] ; then
  echo "${0}: detected a third partition; removing this script from initial boot & exiting."
  sed -i 's| init=/home/pi/amplipi-dev/scripts/first_boot_partitioning||' /boot/cmdline.txt
  exit 1
fi

# bail if anything exits with a non-zero exit status
set -e

# Set up our partitioning scheme, 4 total partitions:
# #    % Name
# 1  <1% /boot
# 2 ~33% system partition 1
# 3 ~33% system partition 2
# 4 ~33% /home
#
# At this point (directly after first imaging) p1 and p2 already exist.
# p1 we will leave unchanged, p2 is currently shrunk as small as possible.
# Leave p2 shrunk for now so as to reduce copy time.
parted ${ROOT_DEV} --align optimal --script mkpart primary 34% 67% # Create system partition 2
parted ${ROOT_DEV} --align optimal --script mkpart primary 67% 100% # Create /home
partprobe ${ROOT_DEV}

# copy system partition 1 to system partition 2, and resize both filesystems to fill
echo "${0}: creating recovery partition..."
mount -o remount,ro /
sleep 5
dd if=${ROOT_DEV}p2 of=${ROOT_DEV}p3 bs=2M oflag=dsync status=progress
mount -o remount,rw /
parted ${ROOT_DEV} --align optimal --script resizepart 2 34% # system partition 1

# then repair and expand our filesystems within these partitions
for PART in ${ROOT_DEV}p2 ${ROOT_DEV}p3; do
    # we don't run e2fsck on the mounted root partition, because it is mounted.
    if [ ${PART} != ${ROOT_DEV}p2 ]; then
        # e2fsck sometimes returns >0 when it's successful.
        set +e
        e2fsck -f ${PART}
        if [ $? -ge 3 ]; then
          echo "${0}: e2fsck -f ${PART} failed; continuing anyways."
        fi
        set -e
    fi

    resize2fs ${PART}
done

sed -i 's| init=/home/pi/amplipi-dev/scripts/first_boot_partitioning||' /boot/cmdline.txt

sync

sleep 3
